* Ruby を学ぶために必要な道具

最初のテキストは、とにかくがむしゃらにプログラムを書かせるような仕組みになっています。プログラミングの勉強において「写経」は大変重要ですが、写経させるプログラム例を作るのは至難の業です。この章では、そんな辛く苦しい時期を出来るだけ緩和させるような、便利な道具たちを紹介したいと思います。

+ Kernel#p

先に説明しておきますが、Hoge#fuga という表記があった時、それは「Hoge クラスの fuga メソッド」を表します。「クラス」というのは、文字列とか、数字とか、配列とかそういうレベルの区切り方です。「じゃあ Kernel って何じゃい」と思うでしょうが、今はあんまり気にしなくていいです (分かる人はここを説明文で代替してください……)。

テキストの中では、とかく print メソッドが幅を利かせていて、出力系のメソッドはこれしか無いんじゃないかという勢いですが、もちろん他にもあります。行末に自動で改行を挿入してくれる puts、指定したフォーマットで適当に数字や文字列を埋め込んでくれる printf などいろいろありますが、Ruby を勉強する上で絶対に外せない出力系メソッドは何と言っても p メソッドです。print メソッドなど他の出力系のメソッドがとにかくただ普通に文字列を出力するのに対し、p メソッドはクラスの違いが分かるように適度に表現方法を変えて出力してくれます。例えば以下の通り。

#+BEGIN_SRC ruby
puts 1    #=> 1
p 1       #=> 1   ←ただの 1 だからこれは数字
puts "1"  #=> 1
p "1"     #=> "1" ←ダブルクォーテーションが文字列を表している
          #         数字との違いが分かりやすい
#+END_SRC

見れば分かると思いますが、=hoge #\=> fuga=という書き方は、「hoge を実行すると fuga になるよ」という意味です。上のように、数字や文字列の違いが分かるように出力してくれるので、とても便利です。Ruby で開発する上ではこの p デバッグはとても重要です。プログラムを書いていて、上手く動かないなと思ったら、気になる変数を片っぱしから p していきましょう。
